{"ast":null,"code":"import \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nimport \"antd/es/input/style\";\nimport _Input from \"antd/es/input\";\nimport _classCallCheck from \"C:\\\\Users\\\\user\\\\Documents\\\\GitHub\\\\kickvillage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\user\\\\Documents\\\\GitHub\\\\kickvillage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\user\\\\Documents\\\\GitHub\\\\kickvillage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\user\\\\Documents\\\\GitHub\\\\kickvillage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\user\\\\Documents\\\\GitHub\\\\kickvillage\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\GitHub\\\\kickvillage\\\\src\\\\components\\\\passwordform\\\\passwordform.js\";\nimport React, { Component } from 'react';\n\nvar PasswordForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PasswordForm, _React$Component);\n\n  function PasswordForm() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PasswordForm);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PasswordForm)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      confirmDirty: false\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFieldsAndScroll(function (err, values) {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    };\n\n    _this.handleConfirmBlur = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        confirmDirty: _this.state.confirmDirty || !!value\n      });\n    };\n\n    _this.compareToFirstPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('패스워드가 일치하지 않습니다.');\n      } else {\n        callback();\n      }\n    };\n\n    _this.validateToNextPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && _this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    return _this;\n  }\n\n  _createClass(PasswordForm, [{\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      var formItemLayout = {\n        labelCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 8\n          }\n        },\n        wrapperCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 16\n          }\n        }\n      };\n      return React.createElement(_Form, Object.assign({}, formItemLayout, {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), React.createElement(_Form.Item, {\n        label: \"\\uC0C8 \\uBE44\\uBC00\\uBC88\\uD638\",\n        hasFeedback: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, getFieldDecorator('password', {\n        rules: [{\n          message: '비밀번호를 입력하십시오.'\n        }, {\n          validator: this.validateToNextPassword\n        }]\n      })(React.createElement(_Input.Password, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }))), React.createElement(_Form.Item, {\n        label: \"\\uBE44\\uBC00\\uBC88\\uD638 \\uD655\\uC778\",\n        hasFeedback: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, getFieldDecorator('confirm', {\n        rules: [{\n          message: '비밀번호를 한번 더 입력하십시오.'\n        }, {\n          validator: this.compareToFirstPassword\n        }]\n      })(React.createElement(_Input.Password, {\n        onBlur: this.handleConfirmBlur,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }))), React.createElement(_Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(_Button, {\n        type: \"primary\",\n        onClick: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"\\uD655\\uC778\")));\n    }\n  }]);\n\n  return PasswordForm;\n}(React.Component);\n\nexport default _Form.create({\n  name: 'passwordForm'\n})(PasswordForm);","map":{"version":3,"sources":["C:\\Users\\user\\Documents\\GitHub\\kickvillage\\src\\components\\passwordform\\passwordform.js"],"names":["React","Component","PasswordForm","state","confirmDirty","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","rules","message","validator","create","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Form,\n    Input,\n    Button\n} from 'antd';\n\nclass PasswordForm extends React.Component {\n\n    state = {\n        confirmDirty: false\n      };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n          if (!err) {\n            console.log('Received values of form: ', values);\n          }\n        });\n      };\n    \n      handleConfirmBlur = e => {\n        const { value } = e.target;\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n      };\n\n    compareToFirstPassword = (rule, value, callback) => {\n        const { form } = this.props;\n        if (value && value !== form.getFieldValue('password')) {\n            callback('패스워드가 일치하지 않습니다.');\n        } else {\n            callback();\n        }\n    };\n\n    validateToNextPassword = (rule, value, callback) => {\n        const { form } = this.props;\n        if (value && this.state.confirmDirty) {\n            form.validateFields(['confirm'], { force: true });\n        }\n        callback();\n    };\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n\n        const formItemLayout = {\n            labelCol: {\n                xs: { span: 24 },\n                sm: { span: 8 },\n            },\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 16 },\n            },\n        };\n        return (\n            <Form {...formItemLayout} onSubmit={this.handleSubmit}>\n                <Form.Item label=\"새 비밀번호\" hasFeedback>\n                    {getFieldDecorator('password', {\n                        rules: [\n                            {\n                                message: '비밀번호를 입력하십시오.',\n                            },\n                            {\n                                validator: this.validateToNextPassword,\n                            },\n                        ],\n                    })(<Input.Password />)}\n                </Form.Item>\n                <Form.Item label=\"비밀번호 확인\" hasFeedback>\n                    {getFieldDecorator('confirm', {\n                        rules: [\n                            {\n                                message: '비밀번호를 한번 더 입력하십시오.',\n                            },\n                            {\n                                validator: this.compareToFirstPassword,\n                            },\n                        ],\n                    })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n                </Form.Item>\n                <Form.Item>\n                    <Button type=\"primary\" onClick={this.handleSubmit}>\n                        확인\n                    </Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport default Form.create({ name: 'passwordForm' })(PasswordForm);"]},"metadata":{},"sourceType":"module"}